/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  none,
  some,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  TokenProgramVersion,
  TokenStandard,
  getCollectionDecoder,
  getCollectionEncoder,
  getCreatorDecoder,
  getCreatorEncoder,
  getTokenProgramVersionDecoder,
  getTokenProgramVersionEncoder,
  getTokenStandardDecoder,
  getTokenStandardEncoder,
  getUsesDecoder,
  getUsesEncoder,
  type Collection,
  type CollectionArgs,
  type Creator,
  type CreatorArgs,
  type TokenProgramVersionArgs,
  type TokenStandardArgs,
  type Uses,
  type UsesArgs,
} from '.';

export type MetadataArgs = {
  /** The name of the asset */
  name: string;
  /** The symbol for the asset */
  symbol: string;
  /** URI pointing to JSON representing the asset */
  uri: string;
  /** Royalty basis points that goes to creators in secondary sales (0-10000) */
  sellerFeeBasisPoints: number;
  /** Immutable, once flipped, all sales of this metadata are considered secondary. */
  primarySaleHappened: boolean;
  /** Whether or not the data struct is mutable, default is not */
  isMutable: boolean;
  /** nonce for easy calculation of editions, if present */
  editionNonce: Option<number>;
  /** Token standard.  Currently only `NonFungible` is allowed. */
  tokenStandard: Option<TokenStandard>;
  /** Collection */
  collection: Option<Collection>;
  /** Uses */
  uses: Option<Uses>;
  tokenProgramVersion: TokenProgramVersion;
  creators: Array<Creator>;
};

export type MetadataArgsArgs = {
  /** The name of the asset */
  name: string;
  /** The symbol for the asset */
  symbol?: string;
  /** URI pointing to JSON representing the asset */
  uri: string;
  /** Royalty basis points that goes to creators in secondary sales (0-10000) */
  sellerFeeBasisPoints: number;
  /** Immutable, once flipped, all sales of this metadata are considered secondary. */
  primarySaleHappened?: boolean;
  /** Whether or not the data struct is mutable, default is not */
  isMutable?: boolean;
  /** nonce for easy calculation of editions, if present */
  editionNonce?: OptionOrNullable<number>;
  /** Token standard.  Currently only `NonFungible` is allowed. */
  tokenStandard?: OptionOrNullable<TokenStandardArgs>;
  /** Collection */
  collection: OptionOrNullable<CollectionArgs>;
  /** Uses */
  uses?: OptionOrNullable<UsesArgs>;
  tokenProgramVersion?: TokenProgramVersionArgs;
  creators: Array<CreatorArgs>;
};

export function getMetadataArgsEncoder(): Encoder<MetadataArgsArgs> {
  return transformEncoder(
    getStructEncoder([
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['sellerFeeBasisPoints', getU16Encoder()],
      ['primarySaleHappened', getBooleanEncoder()],
      ['isMutable', getBooleanEncoder()],
      ['editionNonce', getOptionEncoder(getU8Encoder())],
      ['tokenStandard', getOptionEncoder(getTokenStandardEncoder())],
      ['collection', getOptionEncoder(getCollectionEncoder())],
      ['uses', getOptionEncoder(getUsesEncoder())],
      ['tokenProgramVersion', getTokenProgramVersionEncoder()],
      ['creators', getArrayEncoder(getCreatorEncoder())],
    ]),
    (value) => ({
      ...value,
      symbol: value.symbol ?? '',
      primarySaleHappened: value.primarySaleHappened ?? false,
      isMutable: value.isMutable ?? true,
      editionNonce: value.editionNonce ?? none(),
      tokenStandard: value.tokenStandard ?? some(TokenStandard.NonFungible),
      uses: value.uses ?? none(),
      tokenProgramVersion:
        value.tokenProgramVersion ?? TokenProgramVersion.Original,
    })
  );
}

export function getMetadataArgsDecoder(): Decoder<MetadataArgs> {
  return getStructDecoder([
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['sellerFeeBasisPoints', getU16Decoder()],
    ['primarySaleHappened', getBooleanDecoder()],
    ['isMutable', getBooleanDecoder()],
    ['editionNonce', getOptionDecoder(getU8Decoder())],
    ['tokenStandard', getOptionDecoder(getTokenStandardDecoder())],
    ['collection', getOptionDecoder(getCollectionDecoder())],
    ['uses', getOptionDecoder(getUsesDecoder())],
    ['tokenProgramVersion', getTokenProgramVersionDecoder()],
    ['creators', getArrayDecoder(getCreatorDecoder())],
  ]);
}

export function getMetadataArgsCodec(): Codec<MetadataArgsArgs, MetadataArgs> {
  return combineCodec(getMetadataArgsEncoder(), getMetadataArgsDecoder());
}
