/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { findMasterEditionPda, findMetadataPda } from '../../hooked';
import { findTreeConfigPda } from '../pdas';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMetadataArgsDecoder,
  getMetadataArgsEncoder,
  type MetadataArgs,
  type MetadataArgsArgs,
} from '../types';

export const MINT_TO_COLLECTION_V1_DISCRIMINATOR = new Uint8Array([
  153, 18, 178, 47, 197, 158, 86, 15,
]);

export function getMintToCollectionV1DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MINT_TO_COLLECTION_V1_DISCRIMINATOR
  );
}

export type MintToCollectionV1Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountLeafOwner extends string | AccountMeta<string> = string,
  TAccountLeafDelegate extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTreeCreatorOrDelegate extends string | AccountMeta<string> = string,
  TAccountCollectionAuthority extends string | AccountMeta<string> = string,
  TAccountCollectionAuthorityRecordPda extends
    | string
    | AccountMeta<string> = string,
  TAccountCollectionMint extends string | AccountMeta<string> = string,
  TAccountCollectionMetadata extends string | AccountMeta<string> = string,
  TAccountCollectionEdition extends string | AccountMeta<string> = string,
  TAccountBubblegumSigner extends
    | string
    | AccountMeta<string> = 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY',
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV',
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK',
  TAccountTokenMetadataProgram extends
    | string
    | AccountMeta<string> = 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? WritableAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountLeafOwner extends string
        ? ReadonlyAccount<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountLeafDelegate extends string
        ? ReadonlyAccount<TAccountLeafDelegate>
        : TAccountLeafDelegate,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTreeCreatorOrDelegate extends string
        ? ReadonlySignerAccount<TAccountTreeCreatorOrDelegate> &
            AccountSignerMeta<TAccountTreeCreatorOrDelegate>
        : TAccountTreeCreatorOrDelegate,
      TAccountCollectionAuthority extends string
        ? ReadonlySignerAccount<TAccountCollectionAuthority> &
            AccountSignerMeta<TAccountCollectionAuthority>
        : TAccountCollectionAuthority,
      TAccountCollectionAuthorityRecordPda extends string
        ? ReadonlyAccount<TAccountCollectionAuthorityRecordPda>
        : TAccountCollectionAuthorityRecordPda,
      TAccountCollectionMint extends string
        ? ReadonlyAccount<TAccountCollectionMint>
        : TAccountCollectionMint,
      TAccountCollectionMetadata extends string
        ? WritableAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountCollectionEdition extends string
        ? ReadonlyAccount<TAccountCollectionEdition>
        : TAccountCollectionEdition,
      TAccountBubblegumSigner extends string
        ? ReadonlyAccount<TAccountBubblegumSigner>
        : TAccountBubblegumSigner,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintToCollectionV1InstructionData = {
  discriminator: ReadonlyUint8Array;
  metadata: MetadataArgs;
};

export type MintToCollectionV1InstructionDataArgs = {
  metadata: MetadataArgsArgs;
};

export function getMintToCollectionV1InstructionDataEncoder(): Encoder<MintToCollectionV1InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['metadata', getMetadataArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: MINT_TO_COLLECTION_V1_DISCRIMINATOR,
    })
  );
}

export function getMintToCollectionV1InstructionDataDecoder(): Decoder<MintToCollectionV1InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['metadata', getMetadataArgsDecoder()],
  ]);
}

export function getMintToCollectionV1InstructionDataCodec(): Codec<
  MintToCollectionV1InstructionDataArgs,
  MintToCollectionV1InstructionData
> {
  return combineCodec(
    getMintToCollectionV1InstructionDataEncoder(),
    getMintToCollectionV1InstructionDataDecoder()
  );
}

export type MintToCollectionV1AsyncInput<
  TAccountTreeConfig extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountPayer extends string = string,
  TAccountTreeCreatorOrDelegate extends string = string,
  TAccountCollectionAuthority extends string = string,
  TAccountCollectionAuthorityRecordPda extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionEdition extends string = string,
  TAccountBubblegumSigner extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig?: Address<TAccountTreeConfig>;
  leafOwner: Address<TAccountLeafOwner>;
  leafDelegate?: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  payer: TransactionSigner<TAccountPayer>;
  treeCreatorOrDelegate: TransactionSigner<TAccountTreeCreatorOrDelegate>;
  collectionAuthority: TransactionSigner<TAccountCollectionAuthority>;
  /**
   * If there is no collecton authority record PDA then
   * this must be the Bubblegum program address.
   */
  collectionAuthorityRecordPda?: Address<TAccountCollectionAuthorityRecordPda>;
  collectionMint: Address<TAccountCollectionMint>;
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  collectionEdition?: Address<TAccountCollectionEdition>;
  bubblegumSigner?: Address<TAccountBubblegumSigner>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  metadata: MintToCollectionV1InstructionDataArgs['metadata'];
};

export async function getMintToCollectionV1InstructionAsync<
  TAccountTreeConfig extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountPayer extends string,
  TAccountTreeCreatorOrDelegate extends string,
  TAccountCollectionAuthority extends string,
  TAccountCollectionAuthorityRecordPda extends string,
  TAccountCollectionMint extends string,
  TAccountCollectionMetadata extends string,
  TAccountCollectionEdition extends string,
  TAccountBubblegumSigner extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: MintToCollectionV1AsyncInput<
    TAccountTreeConfig,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeCreatorOrDelegate,
    TAccountCollectionAuthority,
    TAccountCollectionAuthorityRecordPda,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionEdition,
    TAccountBubblegumSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MintToCollectionV1Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeCreatorOrDelegate,
    TAccountCollectionAuthority,
    TAccountCollectionAuthorityRecordPda,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionEdition,
    TAccountBubblegumSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: false },
    treeCreatorOrDelegate: {
      value: input.treeCreatorOrDelegate ?? null,
      isWritable: false,
    },
    collectionAuthority: {
      value: input.collectionAuthority ?? null,
      isWritable: false,
    },
    collectionAuthorityRecordPda: {
      value: input.collectionAuthorityRecordPda ?? null,
      isWritable: false,
    },
    collectionMint: { value: input.collectionMint ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    collectionEdition: {
      value: input.collectionEdition ?? null,
      isWritable: false,
    },
    bubblegumSigner: {
      value: input.bubblegumSigner ?? null,
      isWritable: false,
    },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeConfig.value) {
    accounts.treeConfig.value = await findTreeConfigPda({
      merkleTree: expectAddress(accounts.merkleTree.value),
    });
  }
  if (!accounts.leafDelegate.value) {
    accounts.leafDelegate.value = expectSome(accounts.leafOwner.value);
  }
  if (!accounts.collectionMetadata.value) {
    accounts.collectionMetadata.value = await findMetadataPda({
      mint: expectAddress(accounts.collectionMint.value),
    });
  }
  if (!accounts.collectionEdition.value) {
    accounts.collectionEdition.value = await findMasterEditionPda({
      mint: expectAddress(accounts.collectionMint.value),
    });
  }
  if (!accounts.bubblegumSigner.value) {
    accounts.bubblegumSigner.value = programAddress;
    accounts.bubblegumSigner.isWritable = false;
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV' as Address<'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK' as Address<'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY' as Address<'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.treeCreatorOrDelegate),
      getAccountMeta(accounts.collectionAuthority),
      getAccountMeta(accounts.collectionAuthorityRecordPda),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.collectionEdition),
      getAccountMeta(accounts.bubblegumSigner),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintToCollectionV1InstructionDataEncoder().encode(
      args as MintToCollectionV1InstructionDataArgs
    ),
  } as MintToCollectionV1Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeCreatorOrDelegate,
    TAccountCollectionAuthority,
    TAccountCollectionAuthorityRecordPda,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionEdition,
    TAccountBubblegumSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type MintToCollectionV1Input<
  TAccountTreeConfig extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountPayer extends string = string,
  TAccountTreeCreatorOrDelegate extends string = string,
  TAccountCollectionAuthority extends string = string,
  TAccountCollectionAuthorityRecordPda extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionEdition extends string = string,
  TAccountBubblegumSigner extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  leafOwner: Address<TAccountLeafOwner>;
  leafDelegate?: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  payer: TransactionSigner<TAccountPayer>;
  treeCreatorOrDelegate: TransactionSigner<TAccountTreeCreatorOrDelegate>;
  collectionAuthority: TransactionSigner<TAccountCollectionAuthority>;
  /**
   * If there is no collecton authority record PDA then
   * this must be the Bubblegum program address.
   */
  collectionAuthorityRecordPda?: Address<TAccountCollectionAuthorityRecordPda>;
  collectionMint: Address<TAccountCollectionMint>;
  collectionMetadata: Address<TAccountCollectionMetadata>;
  collectionEdition: Address<TAccountCollectionEdition>;
  bubblegumSigner?: Address<TAccountBubblegumSigner>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  metadata: MintToCollectionV1InstructionDataArgs['metadata'];
};

export function getMintToCollectionV1Instruction<
  TAccountTreeConfig extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountPayer extends string,
  TAccountTreeCreatorOrDelegate extends string,
  TAccountCollectionAuthority extends string,
  TAccountCollectionAuthorityRecordPda extends string,
  TAccountCollectionMint extends string,
  TAccountCollectionMetadata extends string,
  TAccountCollectionEdition extends string,
  TAccountBubblegumSigner extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: MintToCollectionV1Input<
    TAccountTreeConfig,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeCreatorOrDelegate,
    TAccountCollectionAuthority,
    TAccountCollectionAuthorityRecordPda,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionEdition,
    TAccountBubblegumSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintToCollectionV1Instruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountLeafOwner,
  TAccountLeafDelegate,
  TAccountMerkleTree,
  TAccountPayer,
  TAccountTreeCreatorOrDelegate,
  TAccountCollectionAuthority,
  TAccountCollectionAuthorityRecordPda,
  TAccountCollectionMint,
  TAccountCollectionMetadata,
  TAccountCollectionEdition,
  TAccountBubblegumSigner,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountTokenMetadataProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: false },
    treeCreatorOrDelegate: {
      value: input.treeCreatorOrDelegate ?? null,
      isWritable: false,
    },
    collectionAuthority: {
      value: input.collectionAuthority ?? null,
      isWritable: false,
    },
    collectionAuthorityRecordPda: {
      value: input.collectionAuthorityRecordPda ?? null,
      isWritable: false,
    },
    collectionMint: { value: input.collectionMint ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    collectionEdition: {
      value: input.collectionEdition ?? null,
      isWritable: false,
    },
    bubblegumSigner: {
      value: input.bubblegumSigner ?? null,
      isWritable: false,
    },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.leafDelegate.value) {
    accounts.leafDelegate.value = expectSome(accounts.leafOwner.value);
  }
  if (!accounts.bubblegumSigner.value) {
    accounts.bubblegumSigner.value = programAddress;
    accounts.bubblegumSigner.isWritable = false;
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV' as Address<'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK' as Address<'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY' as Address<'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.treeCreatorOrDelegate),
      getAccountMeta(accounts.collectionAuthority),
      getAccountMeta(accounts.collectionAuthorityRecordPda),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.collectionEdition),
      getAccountMeta(accounts.bubblegumSigner),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintToCollectionV1InstructionDataEncoder().encode(
      args as MintToCollectionV1InstructionDataArgs
    ),
  } as MintToCollectionV1Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeCreatorOrDelegate,
    TAccountCollectionAuthority,
    TAccountCollectionAuthorityRecordPda,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionEdition,
    TAccountBubblegumSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMintToCollectionV1Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    leafOwner: TAccountMetas[1];
    leafDelegate: TAccountMetas[2];
    merkleTree: TAccountMetas[3];
    payer: TAccountMetas[4];
    treeCreatorOrDelegate: TAccountMetas[5];
    collectionAuthority: TAccountMetas[6];
    /**
     * If there is no collecton authority record PDA then
     * this must be the Bubblegum program address.
     */

    collectionAuthorityRecordPda?: TAccountMetas[7] | undefined;
    collectionMint: TAccountMetas[8];
    collectionMetadata: TAccountMetas[9];
    collectionEdition: TAccountMetas[10];
    bubblegumSigner: TAccountMetas[11];
    logWrapper: TAccountMetas[12];
    compressionProgram: TAccountMetas[13];
    tokenMetadataProgram: TAccountMetas[14];
    systemProgram: TAccountMetas[15];
  };
  data: MintToCollectionV1InstructionData;
};

export function parseMintToCollectionV1Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMintToCollectionV1Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_BUBBLEGUM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      leafOwner: getNextAccount(),
      leafDelegate: getNextAccount(),
      merkleTree: getNextAccount(),
      payer: getNextAccount(),
      treeCreatorOrDelegate: getNextAccount(),
      collectionAuthority: getNextAccount(),
      collectionAuthorityRecordPda: getNextOptionalAccount(),
      collectionMint: getNextAccount(),
      collectionMetadata: getNextAccount(),
      collectionEdition: getNextAccount(),
      bubblegumSigner: getNextAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMintToCollectionV1InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
