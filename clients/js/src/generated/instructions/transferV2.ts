/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  AccountRole,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  none,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findTreeConfigPda } from '../pdas';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const TRANSFER_V2_DISCRIMINATOR = new Uint8Array([
  119, 40, 6, 235, 234, 221, 248, 49,
]);

export function getTransferV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TRANSFER_V2_DISCRIMINATOR);
}

export type TransferV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountLeafOwner extends string | AccountMeta<string> = string,
  TAccountLeafDelegate extends string | AccountMeta<string> = string,
  TAccountNewLeafOwner extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountCoreCollection extends string | AccountMeta<string> = string,
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3',
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? WritableAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountLeafOwner extends string
        ? ReadonlyAccount<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountLeafDelegate extends string
        ? ReadonlyAccount<TAccountLeafDelegate>
        : TAccountLeafDelegate,
      TAccountNewLeafOwner extends string
        ? ReadonlyAccount<TAccountNewLeafOwner>
        : TAccountNewLeafOwner,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountCoreCollection extends string
        ? ReadonlyAccount<TAccountCoreCollection>
        : TAccountCoreCollection,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TransferV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  root: ReadonlyUint8Array;
  dataHash: ReadonlyUint8Array;
  creatorHash: ReadonlyUint8Array;
  assetDataHash: Option<ReadonlyUint8Array>;
  flags: Option<number>;
  nonce: bigint;
  index: number;
};

export type TransferV2InstructionDataArgs = {
  root: ReadonlyUint8Array;
  dataHash: ReadonlyUint8Array;
  creatorHash: ReadonlyUint8Array;
  assetDataHash?: OptionOrNullable<ReadonlyUint8Array>;
  flags?: OptionOrNullable<number>;
  nonce: number | bigint;
  index: number;
};

export function getTransferV2InstructionDataEncoder(): Encoder<TransferV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
      ['dataHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['creatorHash', fixEncoderSize(getBytesEncoder(), 32)],
      [
        'assetDataHash',
        getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32)),
      ],
      ['flags', getOptionEncoder(getU8Encoder())],
      ['nonce', getU64Encoder()],
      ['index', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSFER_V2_DISCRIMINATOR,
      assetDataHash: value.assetDataHash ?? none(),
      flags: value.flags ?? none(),
    })
  );
}

export function getTransferV2InstructionDataDecoder(): Decoder<TransferV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
    ['dataHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['creatorHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['assetDataHash', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['flags', getOptionDecoder(getU8Decoder())],
    ['nonce', getU64Decoder()],
    ['index', getU32Decoder()],
  ]);
}

export function getTransferV2InstructionDataCodec(): Codec<
  TransferV2InstructionDataArgs,
  TransferV2InstructionData
> {
  return combineCodec(
    getTransferV2InstructionDataEncoder(),
    getTransferV2InstructionDataDecoder()
  );
}

export type TransferV2AsyncInput<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountNewLeafOwner extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountCoreCollection extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig?: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /**
   * Optional authority, defaults to `payer`.  Must be either
   * the leaf owner or collection permanent transfer delegate.
   */
  authority?: TransactionSigner<TAccountAuthority>;
  leafOwner: Address<TAccountLeafOwner>;
  /** Defaults to `leaf_owner` */
  leafDelegate?: Address<TAccountLeafDelegate>;
  newLeafOwner: Address<TAccountNewLeafOwner>;
  merkleTree: Address<TAccountMerkleTree>;
  coreCollection?: Address<TAccountCoreCollection>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: TransferV2InstructionDataArgs['root'];
  dataHash: TransferV2InstructionDataArgs['dataHash'];
  creatorHash: TransferV2InstructionDataArgs['creatorHash'];
  assetDataHash?: TransferV2InstructionDataArgs['assetDataHash'];
  flags?: TransferV2InstructionDataArgs['flags'];
  nonce: TransferV2InstructionDataArgs['nonce'];
  index: TransferV2InstructionDataArgs['index'];
  proof?: Array<Address>;
};

export async function getTransferV2InstructionAsync<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountNewLeafOwner extends string,
  TAccountMerkleTree extends string,
  TAccountCoreCollection extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: TransferV2AsyncInput<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountNewLeafOwner,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  TransferV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountNewLeafOwner,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    newLeafOwner: { value: input.newLeafOwner ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    coreCollection: { value: input.coreCollection ?? null, isWritable: false },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeConfig.value) {
    accounts.treeConfig.value = await findTreeConfigPda({
      merkleTree: expectAddress(accounts.merkleTree.value),
    });
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.newLeafOwner),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.coreCollection),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getTransferV2InstructionDataEncoder().encode(
      args as TransferV2InstructionDataArgs
    ),
  } as TransferV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountNewLeafOwner,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type TransferV2Input<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountNewLeafOwner extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountCoreCollection extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /**
   * Optional authority, defaults to `payer`.  Must be either
   * the leaf owner or collection permanent transfer delegate.
   */
  authority?: TransactionSigner<TAccountAuthority>;
  leafOwner: Address<TAccountLeafOwner>;
  /** Defaults to `leaf_owner` */
  leafDelegate?: Address<TAccountLeafDelegate>;
  newLeafOwner: Address<TAccountNewLeafOwner>;
  merkleTree: Address<TAccountMerkleTree>;
  coreCollection?: Address<TAccountCoreCollection>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: TransferV2InstructionDataArgs['root'];
  dataHash: TransferV2InstructionDataArgs['dataHash'];
  creatorHash: TransferV2InstructionDataArgs['creatorHash'];
  assetDataHash?: TransferV2InstructionDataArgs['assetDataHash'];
  flags?: TransferV2InstructionDataArgs['flags'];
  nonce: TransferV2InstructionDataArgs['nonce'];
  index: TransferV2InstructionDataArgs['index'];
  proof?: Array<Address>;
};

export function getTransferV2Instruction<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountNewLeafOwner extends string,
  TAccountMerkleTree extends string,
  TAccountCoreCollection extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: TransferV2Input<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountNewLeafOwner,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): TransferV2Instruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountPayer,
  TAccountAuthority,
  TAccountLeafOwner,
  TAccountLeafDelegate,
  TAccountNewLeafOwner,
  TAccountMerkleTree,
  TAccountCoreCollection,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    newLeafOwner: { value: input.newLeafOwner ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    coreCollection: { value: input.coreCollection ?? null, isWritable: false },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.newLeafOwner),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.coreCollection),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getTransferV2InstructionDataEncoder().encode(
      args as TransferV2InstructionDataArgs
    ),
  } as TransferV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountNewLeafOwner,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedTransferV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    payer: TAccountMetas[1];
    /**
     * Optional authority, defaults to `payer`.  Must be either
     * the leaf owner or collection permanent transfer delegate.
     */

    authority?: TAccountMetas[2] | undefined;
    leafOwner: TAccountMetas[3];
    /** Defaults to `leaf_owner` */
    leafDelegate?: TAccountMetas[4] | undefined;
    newLeafOwner: TAccountMetas[5];
    merkleTree: TAccountMetas[6];
    coreCollection?: TAccountMetas[7] | undefined;
    logWrapper: TAccountMetas[8];
    compressionProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
  };
  data: TransferV2InstructionData;
};

export function parseTransferV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTransferV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_BUBBLEGUM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      payer: getNextAccount(),
      authority: getNextOptionalAccount(),
      leafOwner: getNextAccount(),
      leafDelegate: getNextOptionalAccount(),
      newLeafOwner: getNextAccount(),
      merkleTree: getNextAccount(),
      coreCollection: getNextOptionalAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getTransferV2InstructionDataDecoder().decode(instruction.data),
  };
}
