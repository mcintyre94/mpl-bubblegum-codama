/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  AccountRole,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  none,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findTreeConfigPda } from '../pdas';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMetadataArgsV2Decoder,
  getMetadataArgsV2Encoder,
  type MetadataArgsV2,
  type MetadataArgsV2Args,
} from '../types';

export const SET_COLLECTION_V2_DISCRIMINATOR = new Uint8Array([
  229, 35, 61, 91, 15, 14, 99, 160,
]);

export function getSetCollectionV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_COLLECTION_V2_DISCRIMINATOR
  );
}

export type SetCollectionV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountNewCollectionAuthority extends string | AccountMeta<string> = string,
  TAccountLeafOwner extends string | AccountMeta<string> = string,
  TAccountLeafDelegate extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountCoreCollection extends string | AccountMeta<string> = string,
  TAccountNewCoreCollection extends string | AccountMeta<string> = string,
  TAccountMplCoreCpiSigner extends
    | string
    | AccountMeta<string> = 'CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk',
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3',
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW',
  TAccountMplCoreProgram extends
    | string
    | AccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? WritableAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountNewCollectionAuthority extends string
        ? ReadonlySignerAccount<TAccountNewCollectionAuthority> &
            AccountSignerMeta<TAccountNewCollectionAuthority>
        : TAccountNewCollectionAuthority,
      TAccountLeafOwner extends string
        ? ReadonlyAccount<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountLeafDelegate extends string
        ? ReadonlyAccount<TAccountLeafDelegate>
        : TAccountLeafDelegate,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountCoreCollection extends string
        ? WritableAccount<TAccountCoreCollection>
        : TAccountCoreCollection,
      TAccountNewCoreCollection extends string
        ? WritableAccount<TAccountNewCoreCollection>
        : TAccountNewCoreCollection,
      TAccountMplCoreCpiSigner extends string
        ? ReadonlyAccount<TAccountMplCoreCpiSigner>
        : TAccountMplCoreCpiSigner,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetCollectionV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  root: ReadonlyUint8Array;
  assetDataHash: Option<ReadonlyUint8Array>;
  flags: Option<number>;
  nonce: bigint;
  index: number;
  metadata: MetadataArgsV2;
};

export type SetCollectionV2InstructionDataArgs = {
  root: ReadonlyUint8Array;
  assetDataHash?: OptionOrNullable<ReadonlyUint8Array>;
  flags?: OptionOrNullable<number>;
  nonce: number | bigint;
  index: number;
  metadata: MetadataArgsV2Args;
};

export function getSetCollectionV2InstructionDataEncoder(): Encoder<SetCollectionV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
      [
        'assetDataHash',
        getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32)),
      ],
      ['flags', getOptionEncoder(getU8Encoder())],
      ['nonce', getU64Encoder()],
      ['index', getU32Encoder()],
      ['metadata', getMetadataArgsV2Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_COLLECTION_V2_DISCRIMINATOR,
      assetDataHash: value.assetDataHash ?? none(),
      flags: value.flags ?? none(),
    })
  );
}

export function getSetCollectionV2InstructionDataDecoder(): Decoder<SetCollectionV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
    ['assetDataHash', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['flags', getOptionDecoder(getU8Decoder())],
    ['nonce', getU64Decoder()],
    ['index', getU32Decoder()],
    ['metadata', getMetadataArgsV2Decoder()],
  ]);
}

export function getSetCollectionV2InstructionDataCodec(): Codec<
  SetCollectionV2InstructionDataArgs,
  SetCollectionV2InstructionData
> {
  return combineCodec(
    getSetCollectionV2InstructionDataEncoder(),
    getSetCollectionV2InstructionDataDecoder()
  );
}

export type SetCollectionV2AsyncInput<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountNewCollectionAuthority extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountCoreCollection extends string = string,
  TAccountNewCoreCollection extends string = string,
  TAccountMplCoreCpiSigner extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig?: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /**
   * If item is not in a collection, then authority must be tree owner/delegate.  If item is
   * getting removed from a collection, then this must be an authority for the existing
   * collection.  Defaults to `payer`
   */
  authority?: TransactionSigner<TAccountAuthority>;
  /**
   * If item is getting added to a new collection, then this must be the authority
   * for the new collection.  Defaults to `authority`
   */
  newCollectionAuthority?: TransactionSigner<TAccountNewCollectionAuthority>;
  leafOwner: Address<TAccountLeafOwner>;
  /** Defaults to `leaf_owner` */
  leafDelegate?: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  coreCollection?: Address<TAccountCoreCollection>;
  newCoreCollection?: Address<TAccountNewCoreCollection>;
  mplCoreCpiSigner?: Address<TAccountMplCoreCpiSigner>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: SetCollectionV2InstructionDataArgs['root'];
  assetDataHash?: SetCollectionV2InstructionDataArgs['assetDataHash'];
  flags?: SetCollectionV2InstructionDataArgs['flags'];
  nonce: SetCollectionV2InstructionDataArgs['nonce'];
  index: SetCollectionV2InstructionDataArgs['index'];
  metadata: SetCollectionV2InstructionDataArgs['metadata'];
  proof?: Array<Address>;
};

export async function getSetCollectionV2InstructionAsync<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountNewCollectionAuthority extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountCoreCollection extends string,
  TAccountNewCoreCollection extends string,
  TAccountMplCoreCpiSigner extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: SetCollectionV2AsyncInput<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountNewCollectionAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountNewCoreCollection,
    TAccountMplCoreCpiSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SetCollectionV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountNewCollectionAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountNewCoreCollection,
    TAccountMplCoreCpiSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    newCollectionAuthority: {
      value: input.newCollectionAuthority ?? null,
      isWritable: false,
    },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    coreCollection: { value: input.coreCollection ?? null, isWritable: true },
    newCoreCollection: {
      value: input.newCoreCollection ?? null,
      isWritable: true,
    },
    mplCoreCpiSigner: {
      value: input.mplCoreCpiSigner ?? null,
      isWritable: false,
    },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeConfig.value) {
    accounts.treeConfig.value = await findTreeConfigPda({
      merkleTree: expectAddress(accounts.merkleTree.value),
    });
  }
  if (!accounts.mplCoreCpiSigner.value) {
    accounts.mplCoreCpiSigner.value =
      'CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk' as Address<'CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk'>;
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.newCollectionAuthority),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.coreCollection),
      getAccountMeta(accounts.newCoreCollection),
      getAccountMeta(accounts.mplCoreCpiSigner),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getSetCollectionV2InstructionDataEncoder().encode(
      args as SetCollectionV2InstructionDataArgs
    ),
  } as SetCollectionV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountNewCollectionAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountNewCoreCollection,
    TAccountMplCoreCpiSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type SetCollectionV2Input<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountNewCollectionAuthority extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountCoreCollection extends string = string,
  TAccountNewCoreCollection extends string = string,
  TAccountMplCoreCpiSigner extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /**
   * If item is not in a collection, then authority must be tree owner/delegate.  If item is
   * getting removed from a collection, then this must be an authority for the existing
   * collection.  Defaults to `payer`
   */
  authority?: TransactionSigner<TAccountAuthority>;
  /**
   * If item is getting added to a new collection, then this must be the authority
   * for the new collection.  Defaults to `authority`
   */
  newCollectionAuthority?: TransactionSigner<TAccountNewCollectionAuthority>;
  leafOwner: Address<TAccountLeafOwner>;
  /** Defaults to `leaf_owner` */
  leafDelegate?: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  coreCollection?: Address<TAccountCoreCollection>;
  newCoreCollection?: Address<TAccountNewCoreCollection>;
  mplCoreCpiSigner?: Address<TAccountMplCoreCpiSigner>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: SetCollectionV2InstructionDataArgs['root'];
  assetDataHash?: SetCollectionV2InstructionDataArgs['assetDataHash'];
  flags?: SetCollectionV2InstructionDataArgs['flags'];
  nonce: SetCollectionV2InstructionDataArgs['nonce'];
  index: SetCollectionV2InstructionDataArgs['index'];
  metadata: SetCollectionV2InstructionDataArgs['metadata'];
  proof?: Array<Address>;
};

export function getSetCollectionV2Instruction<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountNewCollectionAuthority extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountCoreCollection extends string,
  TAccountNewCoreCollection extends string,
  TAccountMplCoreCpiSigner extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: SetCollectionV2Input<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountNewCollectionAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountNewCoreCollection,
    TAccountMplCoreCpiSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetCollectionV2Instruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountPayer,
  TAccountAuthority,
  TAccountNewCollectionAuthority,
  TAccountLeafOwner,
  TAccountLeafDelegate,
  TAccountMerkleTree,
  TAccountCoreCollection,
  TAccountNewCoreCollection,
  TAccountMplCoreCpiSigner,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountMplCoreProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    newCollectionAuthority: {
      value: input.newCollectionAuthority ?? null,
      isWritable: false,
    },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    coreCollection: { value: input.coreCollection ?? null, isWritable: true },
    newCoreCollection: {
      value: input.newCoreCollection ?? null,
      isWritable: true,
    },
    mplCoreCpiSigner: {
      value: input.mplCoreCpiSigner ?? null,
      isWritable: false,
    },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.mplCoreCpiSigner.value) {
    accounts.mplCoreCpiSigner.value =
      'CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk' as Address<'CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk'>;
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.newCollectionAuthority),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.coreCollection),
      getAccountMeta(accounts.newCoreCollection),
      getAccountMeta(accounts.mplCoreCpiSigner),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getSetCollectionV2InstructionDataEncoder().encode(
      args as SetCollectionV2InstructionDataArgs
    ),
  } as SetCollectionV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountNewCollectionAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountNewCoreCollection,
    TAccountMplCoreCpiSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSetCollectionV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    payer: TAccountMetas[1];
    /**
     * If item is not in a collection, then authority must be tree owner/delegate.  If item is
     * getting removed from a collection, then this must be an authority for the existing
     * collection.  Defaults to `payer`
     */

    authority?: TAccountMetas[2] | undefined;
    /**
     * If item is getting added to a new collection, then this must be the authority
     * for the new collection.  Defaults to `authority`
     */

    newCollectionAuthority?: TAccountMetas[3] | undefined;
    leafOwner: TAccountMetas[4];
    /** Defaults to `leaf_owner` */
    leafDelegate?: TAccountMetas[5] | undefined;
    merkleTree: TAccountMetas[6];
    coreCollection?: TAccountMetas[7] | undefined;
    newCoreCollection?: TAccountMetas[8] | undefined;
    mplCoreCpiSigner: TAccountMetas[9];
    logWrapper: TAccountMetas[10];
    compressionProgram: TAccountMetas[11];
    mplCoreProgram: TAccountMetas[12];
    systemProgram: TAccountMetas[13];
  };
  data: SetCollectionV2InstructionData;
};

export function parseSetCollectionV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetCollectionV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_BUBBLEGUM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      payer: getNextAccount(),
      authority: getNextOptionalAccount(),
      newCollectionAuthority: getNextOptionalAccount(),
      leafOwner: getNextAccount(),
      leafDelegate: getNextOptionalAccount(),
      merkleTree: getNextAccount(),
      coreCollection: getNextOptionalAccount(),
      newCoreCollection: getNextOptionalAccount(),
      mplCoreCpiSigner: getNextAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSetCollectionV2InstructionDataDecoder().decode(instruction.data),
  };
}
