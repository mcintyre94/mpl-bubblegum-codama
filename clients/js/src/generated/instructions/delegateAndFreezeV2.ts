/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  AccountRole,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  none,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findTreeConfigPda } from '../pdas';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DELEGATE_AND_FREEZE_V2_DISCRIMINATOR = new Uint8Array([
  17, 229, 35, 218, 190, 241, 250, 123,
]);

export function getDelegateAndFreezeV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DELEGATE_AND_FREEZE_V2_DISCRIMINATOR
  );
}

export type DelegateAndFreezeV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountLeafOwner extends string | AccountMeta<string> = string,
  TAccountPreviousLeafDelegate extends string | AccountMeta<string> = string,
  TAccountNewLeafDelegate extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3',
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? WritableAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountLeafOwner extends string
        ? ReadonlySignerAccount<TAccountLeafOwner> &
            AccountSignerMeta<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountPreviousLeafDelegate extends string
        ? ReadonlyAccount<TAccountPreviousLeafDelegate>
        : TAccountPreviousLeafDelegate,
      TAccountNewLeafDelegate extends string
        ? ReadonlyAccount<TAccountNewLeafDelegate>
        : TAccountNewLeafDelegate,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DelegateAndFreezeV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  root: ReadonlyUint8Array;
  dataHash: ReadonlyUint8Array;
  creatorHash: ReadonlyUint8Array;
  collectionHash: Option<ReadonlyUint8Array>;
  assetDataHash: Option<ReadonlyUint8Array>;
  flags: Option<number>;
  nonce: bigint;
  index: number;
};

export type DelegateAndFreezeV2InstructionDataArgs = {
  root: ReadonlyUint8Array;
  dataHash: ReadonlyUint8Array;
  creatorHash: ReadonlyUint8Array;
  collectionHash?: OptionOrNullable<ReadonlyUint8Array>;
  assetDataHash?: OptionOrNullable<ReadonlyUint8Array>;
  flags?: OptionOrNullable<number>;
  nonce: number | bigint;
  index: number;
};

export function getDelegateAndFreezeV2InstructionDataEncoder(): Encoder<DelegateAndFreezeV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
      ['dataHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['creatorHash', fixEncoderSize(getBytesEncoder(), 32)],
      [
        'collectionHash',
        getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32)),
      ],
      [
        'assetDataHash',
        getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32)),
      ],
      ['flags', getOptionEncoder(getU8Encoder())],
      ['nonce', getU64Encoder()],
      ['index', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DELEGATE_AND_FREEZE_V2_DISCRIMINATOR,
      collectionHash: value.collectionHash ?? none(),
      assetDataHash: value.assetDataHash ?? none(),
      flags: value.flags ?? none(),
    })
  );
}

export function getDelegateAndFreezeV2InstructionDataDecoder(): Decoder<DelegateAndFreezeV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
    ['dataHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['creatorHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['collectionHash', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['assetDataHash', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['flags', getOptionDecoder(getU8Decoder())],
    ['nonce', getU64Decoder()],
    ['index', getU32Decoder()],
  ]);
}

export function getDelegateAndFreezeV2InstructionDataCodec(): Codec<
  DelegateAndFreezeV2InstructionDataArgs,
  DelegateAndFreezeV2InstructionData
> {
  return combineCodec(
    getDelegateAndFreezeV2InstructionDataEncoder(),
    getDelegateAndFreezeV2InstructionDataDecoder()
  );
}

export type DelegateAndFreezeV2AsyncInput<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountPreviousLeafDelegate extends string = string,
  TAccountNewLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig?: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /** Optional leaf owner, defaults to `payer` */
  leafOwner?: TransactionSigner<TAccountLeafOwner>;
  /** Defaults to `leaf_owner` */
  previousLeafDelegate?: Address<TAccountPreviousLeafDelegate>;
  newLeafDelegate: Address<TAccountNewLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: DelegateAndFreezeV2InstructionDataArgs['root'];
  dataHash: DelegateAndFreezeV2InstructionDataArgs['dataHash'];
  creatorHash: DelegateAndFreezeV2InstructionDataArgs['creatorHash'];
  collectionHash?: DelegateAndFreezeV2InstructionDataArgs['collectionHash'];
  assetDataHash?: DelegateAndFreezeV2InstructionDataArgs['assetDataHash'];
  flags?: DelegateAndFreezeV2InstructionDataArgs['flags'];
  nonce: DelegateAndFreezeV2InstructionDataArgs['nonce'];
  index: DelegateAndFreezeV2InstructionDataArgs['index'];
  proof?: Array<Address>;
};

export async function getDelegateAndFreezeV2InstructionAsync<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountLeafOwner extends string,
  TAccountPreviousLeafDelegate extends string,
  TAccountNewLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: DelegateAndFreezeV2AsyncInput<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountLeafOwner,
    TAccountPreviousLeafDelegate,
    TAccountNewLeafDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DelegateAndFreezeV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountLeafOwner,
    TAccountPreviousLeafDelegate,
    TAccountNewLeafDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    previousLeafDelegate: {
      value: input.previousLeafDelegate ?? null,
      isWritable: false,
    },
    newLeafDelegate: {
      value: input.newLeafDelegate ?? null,
      isWritable: false,
    },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeConfig.value) {
    accounts.treeConfig.value = await findTreeConfigPda({
      merkleTree: expectAddress(accounts.merkleTree.value),
    });
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.previousLeafDelegate),
      getAccountMeta(accounts.newLeafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getDelegateAndFreezeV2InstructionDataEncoder().encode(
      args as DelegateAndFreezeV2InstructionDataArgs
    ),
  } as DelegateAndFreezeV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountLeafOwner,
    TAccountPreviousLeafDelegate,
    TAccountNewLeafDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type DelegateAndFreezeV2Input<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountPreviousLeafDelegate extends string = string,
  TAccountNewLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /** Optional leaf owner, defaults to `payer` */
  leafOwner?: TransactionSigner<TAccountLeafOwner>;
  /** Defaults to `leaf_owner` */
  previousLeafDelegate?: Address<TAccountPreviousLeafDelegate>;
  newLeafDelegate: Address<TAccountNewLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: DelegateAndFreezeV2InstructionDataArgs['root'];
  dataHash: DelegateAndFreezeV2InstructionDataArgs['dataHash'];
  creatorHash: DelegateAndFreezeV2InstructionDataArgs['creatorHash'];
  collectionHash?: DelegateAndFreezeV2InstructionDataArgs['collectionHash'];
  assetDataHash?: DelegateAndFreezeV2InstructionDataArgs['assetDataHash'];
  flags?: DelegateAndFreezeV2InstructionDataArgs['flags'];
  nonce: DelegateAndFreezeV2InstructionDataArgs['nonce'];
  index: DelegateAndFreezeV2InstructionDataArgs['index'];
  proof?: Array<Address>;
};

export function getDelegateAndFreezeV2Instruction<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountLeafOwner extends string,
  TAccountPreviousLeafDelegate extends string,
  TAccountNewLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: DelegateAndFreezeV2Input<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountLeafOwner,
    TAccountPreviousLeafDelegate,
    TAccountNewLeafDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DelegateAndFreezeV2Instruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountPayer,
  TAccountLeafOwner,
  TAccountPreviousLeafDelegate,
  TAccountNewLeafDelegate,
  TAccountMerkleTree,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    previousLeafDelegate: {
      value: input.previousLeafDelegate ?? null,
      isWritable: false,
    },
    newLeafDelegate: {
      value: input.newLeafDelegate ?? null,
      isWritable: false,
    },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.previousLeafDelegate),
      getAccountMeta(accounts.newLeafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getDelegateAndFreezeV2InstructionDataEncoder().encode(
      args as DelegateAndFreezeV2InstructionDataArgs
    ),
  } as DelegateAndFreezeV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountLeafOwner,
    TAccountPreviousLeafDelegate,
    TAccountNewLeafDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDelegateAndFreezeV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    payer: TAccountMetas[1];
    /** Optional leaf owner, defaults to `payer` */
    leafOwner?: TAccountMetas[2] | undefined;
    /** Defaults to `leaf_owner` */
    previousLeafDelegate?: TAccountMetas[3] | undefined;
    newLeafDelegate: TAccountMetas[4];
    merkleTree: TAccountMetas[5];
    logWrapper: TAccountMetas[6];
    compressionProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: DelegateAndFreezeV2InstructionData;
};

export function parseDelegateAndFreezeV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDelegateAndFreezeV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_BUBBLEGUM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      payer: getNextAccount(),
      leafOwner: getNextOptionalAccount(),
      previousLeafDelegate: getNextOptionalAccount(),
      newLeafDelegate: getNextAccount(),
      merkleTree: getNextAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDelegateAndFreezeV2InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
