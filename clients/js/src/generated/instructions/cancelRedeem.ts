/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findTreeConfigPda } from '../pdas';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CANCEL_REDEEM_DISCRIMINATOR = new Uint8Array([
  111, 76, 232, 50, 39, 175, 48, 242,
]);

export function getCancelRedeemDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CANCEL_REDEEM_DISCRIMINATOR
  );
}

export type CancelRedeemInstruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountLeafOwner extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountVoucher extends string | AccountMeta<string> = string,
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV',
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? ReadonlyAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountLeafOwner extends string
        ? WritableSignerAccount<TAccountLeafOwner> &
            AccountSignerMeta<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountVoucher extends string
        ? WritableAccount<TAccountVoucher>
        : TAccountVoucher,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CancelRedeemInstructionData = {
  discriminator: ReadonlyUint8Array;
  root: ReadonlyUint8Array;
};

export type CancelRedeemInstructionDataArgs = { root: ReadonlyUint8Array };

export function getCancelRedeemInstructionDataEncoder(): FixedSizeEncoder<CancelRedeemInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: CANCEL_REDEEM_DISCRIMINATOR })
  );
}

export function getCancelRedeemInstructionDataDecoder(): FixedSizeDecoder<CancelRedeemInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getCancelRedeemInstructionDataCodec(): FixedSizeCodec<
  CancelRedeemInstructionDataArgs,
  CancelRedeemInstructionData
> {
  return combineCodec(
    getCancelRedeemInstructionDataEncoder(),
    getCancelRedeemInstructionDataDecoder()
  );
}

export type CancelRedeemAsyncInput<
  TAccountTreeConfig extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountVoucher extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig?: Address<TAccountTreeConfig>;
  leafOwner: TransactionSigner<TAccountLeafOwner>;
  merkleTree: Address<TAccountMerkleTree>;
  voucher: Address<TAccountVoucher>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: CancelRedeemInstructionDataArgs['root'];
};

export async function getCancelRedeemInstructionAsync<
  TAccountTreeConfig extends string,
  TAccountLeafOwner extends string,
  TAccountMerkleTree extends string,
  TAccountVoucher extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: CancelRedeemAsyncInput<
    TAccountTreeConfig,
    TAccountLeafOwner,
    TAccountMerkleTree,
    TAccountVoucher,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CancelRedeemInstruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountLeafOwner,
    TAccountMerkleTree,
    TAccountVoucher,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: false },
    leafOwner: { value: input.leafOwner ?? null, isWritable: true },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    voucher: { value: input.voucher ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeConfig.value) {
    accounts.treeConfig.value = await findTreeConfigPda({
      merkleTree: expectAddress(accounts.merkleTree.value),
    });
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV' as Address<'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK' as Address<'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.voucher),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCancelRedeemInstructionDataEncoder().encode(
      args as CancelRedeemInstructionDataArgs
    ),
  } as CancelRedeemInstruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountLeafOwner,
    TAccountMerkleTree,
    TAccountVoucher,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CancelRedeemInput<
  TAccountTreeConfig extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountVoucher extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  leafOwner: TransactionSigner<TAccountLeafOwner>;
  merkleTree: Address<TAccountMerkleTree>;
  voucher: Address<TAccountVoucher>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: CancelRedeemInstructionDataArgs['root'];
};

export function getCancelRedeemInstruction<
  TAccountTreeConfig extends string,
  TAccountLeafOwner extends string,
  TAccountMerkleTree extends string,
  TAccountVoucher extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: CancelRedeemInput<
    TAccountTreeConfig,
    TAccountLeafOwner,
    TAccountMerkleTree,
    TAccountVoucher,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CancelRedeemInstruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountLeafOwner,
  TAccountMerkleTree,
  TAccountVoucher,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: false },
    leafOwner: { value: input.leafOwner ?? null, isWritable: true },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    voucher: { value: input.voucher ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV' as Address<'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK' as Address<'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.voucher),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCancelRedeemInstructionDataEncoder().encode(
      args as CancelRedeemInstructionDataArgs
    ),
  } as CancelRedeemInstruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountLeafOwner,
    TAccountMerkleTree,
    TAccountVoucher,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCancelRedeemInstruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    leafOwner: TAccountMetas[1];
    merkleTree: TAccountMetas[2];
    voucher: TAccountMetas[3];
    logWrapper: TAccountMetas[4];
    compressionProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: CancelRedeemInstructionData;
};

export function parseCancelRedeemInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCancelRedeemInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      leafOwner: getNextAccount(),
      merkleTree: getNextAccount(),
      voucher: getNextAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCancelRedeemInstructionDataDecoder().decode(instruction.data),
  };
}
