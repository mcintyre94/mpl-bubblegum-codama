/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_V2_DISCRIMINATOR = new Uint8Array([
  21, 11, 159, 47, 4, 195, 106, 56,
]);

export function getCollectV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(COLLECT_V2_DISCRIMINATOR);
}

export type CollectV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountDestination extends
    | string
    | AccountMeta<string> = '2dgJVPC5fjLTBTmMvKDRig9JJUGK2Fgwr3EHShFxckhv',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? WritableAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      ...TRemainingAccounts,
    ]
  >;

export type CollectV2InstructionData = { discriminator: ReadonlyUint8Array };

export type CollectV2InstructionDataArgs = {};

export function getCollectV2InstructionDataEncoder(): FixedSizeEncoder<CollectV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: COLLECT_V2_DISCRIMINATOR })
  );
}

export function getCollectV2InstructionDataDecoder(): FixedSizeDecoder<CollectV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCollectV2InstructionDataCodec(): FixedSizeCodec<
  CollectV2InstructionDataArgs,
  CollectV2InstructionData
> {
  return combineCodec(
    getCollectV2InstructionDataEncoder(),
    getCollectV2InstructionDataDecoder()
  );
}

export type CollectV2Input<
  TAccountTreeConfig extends string = string,
  TAccountDestination extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  destination?: Address<TAccountDestination>;
};

export function getCollectV2Instruction<
  TAccountTreeConfig extends string,
  TAccountDestination extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: CollectV2Input<TAccountTreeConfig, TAccountDestination>,
  config?: { programAddress?: TProgramAddress }
): CollectV2Instruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountDestination
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    destination: { value: input.destination ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.destination.value) {
    accounts.destination.value =
      '2dgJVPC5fjLTBTmMvKDRig9JJUGK2Fgwr3EHShFxckhv' as Address<'2dgJVPC5fjLTBTmMvKDRig9JJUGK2Fgwr3EHShFxckhv'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.destination),
    ],
    programAddress,
    data: getCollectV2InstructionDataEncoder().encode({}),
  } as CollectV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountDestination
  >;

  return instruction;
}

export type ParsedCollectV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    destination: TAccountMetas[1];
  };
  data: CollectV2InstructionData;
};

export function parseCollectV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCollectV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      destination: getNextAccount(),
    },
    data: getCollectV2InstructionDataDecoder().decode(instruction.data),
  };
}
