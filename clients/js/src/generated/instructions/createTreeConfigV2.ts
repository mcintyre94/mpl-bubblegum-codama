/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  BASE_ACCOUNT_SIZE,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { getTreeConfigSize } from '../accounts';
import { findTreeConfigPda } from '../pdas';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type InstructionWithByteDelta,
  type ResolvedAccount,
} from '../shared';

export const CREATE_TREE_CONFIG_V2_DISCRIMINATOR = new Uint8Array([
  55, 99, 95, 215, 142, 203, 227, 205,
]);

export function getCreateTreeConfigV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TREE_CONFIG_V2_DISCRIMINATOR
  );
}

export type CreateTreeConfigV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTreeCreator extends string | AccountMeta<string> = string,
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3',
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? WritableAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTreeCreator extends string
        ? ReadonlySignerAccount<TAccountTreeCreator> &
            AccountSignerMeta<TAccountTreeCreator>
        : TAccountTreeCreator,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTreeConfigV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  maxDepth: number;
  maxBufferSize: number;
  public: Option<boolean>;
};

export type CreateTreeConfigV2InstructionDataArgs = {
  maxDepth: number;
  maxBufferSize: number;
  public: OptionOrNullable<boolean>;
};

export function getCreateTreeConfigV2InstructionDataEncoder(): Encoder<CreateTreeConfigV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxDepth', getU32Encoder()],
      ['maxBufferSize', getU32Encoder()],
      ['public', getOptionEncoder(getBooleanEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_TREE_CONFIG_V2_DISCRIMINATOR,
    })
  );
}

export function getCreateTreeConfigV2InstructionDataDecoder(): Decoder<CreateTreeConfigV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxDepth', getU32Decoder()],
    ['maxBufferSize', getU32Decoder()],
    ['public', getOptionDecoder(getBooleanDecoder())],
  ]);
}

export function getCreateTreeConfigV2InstructionDataCodec(): Codec<
  CreateTreeConfigV2InstructionDataArgs,
  CreateTreeConfigV2InstructionData
> {
  return combineCodec(
    getCreateTreeConfigV2InstructionDataEncoder(),
    getCreateTreeConfigV2InstructionDataDecoder()
  );
}

export type CreateTreeConfigV2AsyncInput<
  TAccountTreeConfig extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountPayer extends string = string,
  TAccountTreeCreator extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig?: Address<TAccountTreeConfig>;
  merkleTree: Address<TAccountMerkleTree>;
  payer: TransactionSigner<TAccountPayer>;
  /** Optional tree creator, defaults to `payer` */
  treeCreator?: TransactionSigner<TAccountTreeCreator>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  maxDepth: CreateTreeConfigV2InstructionDataArgs['maxDepth'];
  maxBufferSize: CreateTreeConfigV2InstructionDataArgs['maxBufferSize'];
  public: CreateTreeConfigV2InstructionDataArgs['public'];
};

export async function getCreateTreeConfigV2InstructionAsync<
  TAccountTreeConfig extends string,
  TAccountMerkleTree extends string,
  TAccountPayer extends string,
  TAccountTreeCreator extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: CreateTreeConfigV2AsyncInput<
    TAccountTreeConfig,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeCreator,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateTreeConfigV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeCreator,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  > &
    InstructionWithByteDelta
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    treeCreator: { value: input.treeCreator ?? null, isWritable: false },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeConfig.value) {
    accounts.treeConfig.value = await findTreeConfigPda({
      merkleTree: expectAddress(accounts.merkleTree.value),
    });
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Bytes created or reallocated by the instruction.
  const byteDelta: number = [getTreeConfigSize() + BASE_ACCOUNT_SIZE].reduce(
    (a, b) => a + b,
    0
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.treeCreator),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateTreeConfigV2InstructionDataEncoder().encode(
      args as CreateTreeConfigV2InstructionDataArgs
    ),
  } as CreateTreeConfigV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeCreator,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return Object.freeze({ ...instruction, byteDelta });
}

export type CreateTreeConfigV2Input<
  TAccountTreeConfig extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountPayer extends string = string,
  TAccountTreeCreator extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  merkleTree: Address<TAccountMerkleTree>;
  payer: TransactionSigner<TAccountPayer>;
  /** Optional tree creator, defaults to `payer` */
  treeCreator?: TransactionSigner<TAccountTreeCreator>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  maxDepth: CreateTreeConfigV2InstructionDataArgs['maxDepth'];
  maxBufferSize: CreateTreeConfigV2InstructionDataArgs['maxBufferSize'];
  public: CreateTreeConfigV2InstructionDataArgs['public'];
};

export function getCreateTreeConfigV2Instruction<
  TAccountTreeConfig extends string,
  TAccountMerkleTree extends string,
  TAccountPayer extends string,
  TAccountTreeCreator extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: CreateTreeConfigV2Input<
    TAccountTreeConfig,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeCreator,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTreeConfigV2Instruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountMerkleTree,
  TAccountPayer,
  TAccountTreeCreator,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountSystemProgram
> &
  InstructionWithByteDelta {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    treeCreator: { value: input.treeCreator ?? null, isWritable: false },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Bytes created or reallocated by the instruction.
  const byteDelta: number = [getTreeConfigSize() + BASE_ACCOUNT_SIZE].reduce(
    (a, b) => a + b,
    0
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.treeCreator),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateTreeConfigV2InstructionDataEncoder().encode(
      args as CreateTreeConfigV2InstructionDataArgs
    ),
  } as CreateTreeConfigV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountMerkleTree,
    TAccountPayer,
    TAccountTreeCreator,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return Object.freeze({ ...instruction, byteDelta });
}

export type ParsedCreateTreeConfigV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    merkleTree: TAccountMetas[1];
    payer: TAccountMetas[2];
    /** Optional tree creator, defaults to `payer` */
    treeCreator?: TAccountMetas[3] | undefined;
    logWrapper: TAccountMetas[4];
    compressionProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: CreateTreeConfigV2InstructionData;
};

export function parseCreateTreeConfigV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateTreeConfigV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_BUBBLEGUM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      merkleTree: getNextAccount(),
      payer: getNextAccount(),
      treeCreator: getNextOptionalAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateTreeConfigV2InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
