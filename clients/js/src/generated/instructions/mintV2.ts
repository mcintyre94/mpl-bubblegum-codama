/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  none,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findTreeConfigPda } from '../pdas';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getAssetDataSchemaDecoder,
  getAssetDataSchemaEncoder,
  getMetadataArgsV2Decoder,
  getMetadataArgsV2Encoder,
  type AssetDataSchema,
  type AssetDataSchemaArgs,
  type MetadataArgsV2,
  type MetadataArgsV2Args,
} from '../types';

export const MINT_V2_DISCRIMINATOR = new Uint8Array([
  120, 121, 23, 146, 173, 110, 199, 205,
]);

export function getMintV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MINT_V2_DISCRIMINATOR);
}

export type MintV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTreeCreatorOrDelegate extends string | AccountMeta<string> = string,
  TAccountCollectionAuthority extends string | AccountMeta<string> = string,
  TAccountLeafOwner extends string | AccountMeta<string> = string,
  TAccountLeafDelegate extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountCoreCollection extends string | AccountMeta<string> = string,
  TAccountMplCoreCpiSigner extends string | AccountMeta<string> = string,
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3',
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW',
  TAccountMplCoreProgram extends
    | string
    | AccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? WritableAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTreeCreatorOrDelegate extends string
        ? ReadonlySignerAccount<TAccountTreeCreatorOrDelegate> &
            AccountSignerMeta<TAccountTreeCreatorOrDelegate>
        : TAccountTreeCreatorOrDelegate,
      TAccountCollectionAuthority extends string
        ? ReadonlySignerAccount<TAccountCollectionAuthority> &
            AccountSignerMeta<TAccountCollectionAuthority>
        : TAccountCollectionAuthority,
      TAccountLeafOwner extends string
        ? ReadonlyAccount<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountLeafDelegate extends string
        ? ReadonlyAccount<TAccountLeafDelegate>
        : TAccountLeafDelegate,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountCoreCollection extends string
        ? WritableAccount<TAccountCoreCollection>
        : TAccountCoreCollection,
      TAccountMplCoreCpiSigner extends string
        ? ReadonlyAccount<TAccountMplCoreCpiSigner>
        : TAccountMplCoreCpiSigner,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  metadata: MetadataArgsV2;
  assetData: Option<ReadonlyUint8Array>;
  assetDataSchema: Option<AssetDataSchema>;
};

export type MintV2InstructionDataArgs = {
  metadata: MetadataArgsV2Args;
  assetData?: OptionOrNullable<ReadonlyUint8Array>;
  assetDataSchema?: OptionOrNullable<AssetDataSchemaArgs>;
};

export function getMintV2InstructionDataEncoder(): Encoder<MintV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['metadata', getMetadataArgsV2Encoder()],
      [
        'assetData',
        getOptionEncoder(
          addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())
        ),
      ],
      ['assetDataSchema', getOptionEncoder(getAssetDataSchemaEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: MINT_V2_DISCRIMINATOR,
      assetData: value.assetData ?? none(),
      assetDataSchema: value.assetDataSchema ?? none(),
    })
  );
}

export function getMintV2InstructionDataDecoder(): Decoder<MintV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['metadata', getMetadataArgsV2Decoder()],
    [
      'assetData',
      getOptionDecoder(
        addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())
      ),
    ],
    ['assetDataSchema', getOptionDecoder(getAssetDataSchemaDecoder())],
  ]);
}

export function getMintV2InstructionDataCodec(): Codec<
  MintV2InstructionDataArgs,
  MintV2InstructionData
> {
  return combineCodec(
    getMintV2InstructionDataEncoder(),
    getMintV2InstructionDataDecoder()
  );
}

export type MintV2AsyncInput<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountTreeCreatorOrDelegate extends string = string,
  TAccountCollectionAuthority extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountCoreCollection extends string = string,
  TAccountMplCoreCpiSigner extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig?: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /** Optional tree delegate, defaults to `payer` */
  treeCreatorOrDelegate?: TransactionSigner<TAccountTreeCreatorOrDelegate>;
  /** Optional collection authority, defaults to `tree_delegate` */
  collectionAuthority?: TransactionSigner<TAccountCollectionAuthority>;
  leafOwner: Address<TAccountLeafOwner>;
  leafDelegate?: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  coreCollection?: Address<TAccountCoreCollection>;
  mplCoreCpiSigner?: Address<TAccountMplCoreCpiSigner>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  metadata: MintV2InstructionDataArgs['metadata'];
  assetData?: MintV2InstructionDataArgs['assetData'];
  assetDataSchema?: MintV2InstructionDataArgs['assetDataSchema'];
};

export async function getMintV2InstructionAsync<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountTreeCreatorOrDelegate extends string,
  TAccountCollectionAuthority extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountCoreCollection extends string,
  TAccountMplCoreCpiSigner extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: MintV2AsyncInput<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountTreeCreatorOrDelegate,
    TAccountCollectionAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountMplCoreCpiSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MintV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountTreeCreatorOrDelegate,
    TAccountCollectionAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountMplCoreCpiSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    treeCreatorOrDelegate: {
      value: input.treeCreatorOrDelegate ?? null,
      isWritable: false,
    },
    collectionAuthority: {
      value: input.collectionAuthority ?? null,
      isWritable: false,
    },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    coreCollection: { value: input.coreCollection ?? null, isWritable: true },
    mplCoreCpiSigner: {
      value: input.mplCoreCpiSigner ?? null,
      isWritable: false,
    },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeConfig.value) {
    accounts.treeConfig.value = await findTreeConfigPda({
      merkleTree: expectAddress(accounts.merkleTree.value),
    });
  }
  if (!accounts.mplCoreCpiSigner.value) {
    if (accounts.coreCollection.value) {
      accounts.mplCoreCpiSigner.value =
        'CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk' as Address<'CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk'>;
    }
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.treeCreatorOrDelegate),
      getAccountMeta(accounts.collectionAuthority),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.coreCollection),
      getAccountMeta(accounts.mplCoreCpiSigner),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintV2InstructionDataEncoder().encode(
      args as MintV2InstructionDataArgs
    ),
  } as MintV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountTreeCreatorOrDelegate,
    TAccountCollectionAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountMplCoreCpiSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type MintV2Input<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountTreeCreatorOrDelegate extends string = string,
  TAccountCollectionAuthority extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountCoreCollection extends string = string,
  TAccountMplCoreCpiSigner extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /** Optional tree delegate, defaults to `payer` */
  treeCreatorOrDelegate?: TransactionSigner<TAccountTreeCreatorOrDelegate>;
  /** Optional collection authority, defaults to `tree_delegate` */
  collectionAuthority?: TransactionSigner<TAccountCollectionAuthority>;
  leafOwner: Address<TAccountLeafOwner>;
  leafDelegate?: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  coreCollection?: Address<TAccountCoreCollection>;
  mplCoreCpiSigner?: Address<TAccountMplCoreCpiSigner>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  metadata: MintV2InstructionDataArgs['metadata'];
  assetData?: MintV2InstructionDataArgs['assetData'];
  assetDataSchema?: MintV2InstructionDataArgs['assetDataSchema'];
};

export function getMintV2Instruction<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountTreeCreatorOrDelegate extends string,
  TAccountCollectionAuthority extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountCoreCollection extends string,
  TAccountMplCoreCpiSigner extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: MintV2Input<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountTreeCreatorOrDelegate,
    TAccountCollectionAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountMplCoreCpiSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintV2Instruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountPayer,
  TAccountTreeCreatorOrDelegate,
  TAccountCollectionAuthority,
  TAccountLeafOwner,
  TAccountLeafDelegate,
  TAccountMerkleTree,
  TAccountCoreCollection,
  TAccountMplCoreCpiSigner,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountMplCoreProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    treeCreatorOrDelegate: {
      value: input.treeCreatorOrDelegate ?? null,
      isWritable: false,
    },
    collectionAuthority: {
      value: input.collectionAuthority ?? null,
      isWritable: false,
    },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    coreCollection: { value: input.coreCollection ?? null, isWritable: true },
    mplCoreCpiSigner: {
      value: input.mplCoreCpiSigner ?? null,
      isWritable: false,
    },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.mplCoreCpiSigner.value) {
    if (accounts.coreCollection.value) {
      accounts.mplCoreCpiSigner.value =
        'CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk' as Address<'CbNY3JiXdXNE9tPNEk1aRZVEkWdj2v7kfJLNQwZZgpXk'>;
    }
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.treeCreatorOrDelegate),
      getAccountMeta(accounts.collectionAuthority),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.coreCollection),
      getAccountMeta(accounts.mplCoreCpiSigner),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintV2InstructionDataEncoder().encode(
      args as MintV2InstructionDataArgs
    ),
  } as MintV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountTreeCreatorOrDelegate,
    TAccountCollectionAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountMplCoreCpiSigner,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMintV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    payer: TAccountMetas[1];
    /** Optional tree delegate, defaults to `payer` */
    treeCreatorOrDelegate?: TAccountMetas[2] | undefined;
    /** Optional collection authority, defaults to `tree_delegate` */
    collectionAuthority?: TAccountMetas[3] | undefined;
    leafOwner: TAccountMetas[4];
    leafDelegate?: TAccountMetas[5] | undefined;
    merkleTree: TAccountMetas[6];
    coreCollection?: TAccountMetas[7] | undefined;
    mplCoreCpiSigner?: TAccountMetas[8] | undefined;
    logWrapper: TAccountMetas[9];
    compressionProgram: TAccountMetas[10];
    mplCoreProgram: TAccountMetas[11];
    systemProgram: TAccountMetas[12];
  };
  data: MintV2InstructionData;
};

export function parseMintV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMintV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_BUBBLEGUM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      payer: getNextAccount(),
      treeCreatorOrDelegate: getNextOptionalAccount(),
      collectionAuthority: getNextOptionalAccount(),
      leafOwner: getNextAccount(),
      leafDelegate: getNextOptionalAccount(),
      merkleTree: getNextAccount(),
      coreCollection: getNextOptionalAccount(),
      mplCoreCpiSigner: getNextOptionalAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMintV2InstructionDataDecoder().decode(instruction.data),
  };
}
