/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  AccountRole,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  none,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findTreeConfigPda } from '../pdas';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMetadataArgsV2Decoder,
  getMetadataArgsV2Encoder,
  type MetadataArgsV2,
  type MetadataArgsV2Args,
} from '../types';

export const VERIFY_CREATOR_V2_DISCRIMINATOR = new Uint8Array([
  85, 138, 140, 42, 22, 241, 118, 102,
]);

export function getVerifyCreatorV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VERIFY_CREATOR_V2_DISCRIMINATOR
  );
}

export type VerifyCreatorV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountLeafOwner extends string | AccountMeta<string> = string,
  TAccountLeafDelegate extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3',
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? WritableAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCreator extends string
        ? ReadonlySignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountLeafOwner extends string
        ? ReadonlyAccount<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountLeafDelegate extends string
        ? ReadonlyAccount<TAccountLeafDelegate>
        : TAccountLeafDelegate,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type VerifyCreatorV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  root: ReadonlyUint8Array;
  assetDataHash: Option<ReadonlyUint8Array>;
  flags: Option<number>;
  nonce: bigint;
  index: number;
  metadata: MetadataArgsV2;
};

export type VerifyCreatorV2InstructionDataArgs = {
  root: ReadonlyUint8Array;
  assetDataHash?: OptionOrNullable<ReadonlyUint8Array>;
  flags?: OptionOrNullable<number>;
  nonce: number | bigint;
  index: number;
  metadata: MetadataArgsV2Args;
};

export function getVerifyCreatorV2InstructionDataEncoder(): Encoder<VerifyCreatorV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
      [
        'assetDataHash',
        getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32)),
      ],
      ['flags', getOptionEncoder(getU8Encoder())],
      ['nonce', getU64Encoder()],
      ['index', getU32Encoder()],
      ['metadata', getMetadataArgsV2Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: VERIFY_CREATOR_V2_DISCRIMINATOR,
      assetDataHash: value.assetDataHash ?? none(),
      flags: value.flags ?? none(),
    })
  );
}

export function getVerifyCreatorV2InstructionDataDecoder(): Decoder<VerifyCreatorV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
    ['assetDataHash', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['flags', getOptionDecoder(getU8Decoder())],
    ['nonce', getU64Decoder()],
    ['index', getU32Decoder()],
    ['metadata', getMetadataArgsV2Decoder()],
  ]);
}

export function getVerifyCreatorV2InstructionDataCodec(): Codec<
  VerifyCreatorV2InstructionDataArgs,
  VerifyCreatorV2InstructionData
> {
  return combineCodec(
    getVerifyCreatorV2InstructionDataEncoder(),
    getVerifyCreatorV2InstructionDataDecoder()
  );
}

export type VerifyCreatorV2AsyncInput<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig?: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /** Optional creator, defaults to `payer` */
  creator?: TransactionSigner<TAccountCreator>;
  leafOwner: Address<TAccountLeafOwner>;
  /** Defaults to `leaf_owner` */
  leafDelegate?: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: VerifyCreatorV2InstructionDataArgs['root'];
  assetDataHash?: VerifyCreatorV2InstructionDataArgs['assetDataHash'];
  flags?: VerifyCreatorV2InstructionDataArgs['flags'];
  nonce: VerifyCreatorV2InstructionDataArgs['nonce'];
  index: VerifyCreatorV2InstructionDataArgs['index'];
  metadata: VerifyCreatorV2InstructionDataArgs['metadata'];
  proof?: Array<Address>;
};

export async function getVerifyCreatorV2InstructionAsync<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: VerifyCreatorV2AsyncInput<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountCreator,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  VerifyCreatorV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountCreator,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeConfig.value) {
    accounts.treeConfig.value = await findTreeConfigPda({
      merkleTree: expectAddress(accounts.merkleTree.value),
    });
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getVerifyCreatorV2InstructionDataEncoder().encode(
      args as VerifyCreatorV2InstructionDataArgs
    ),
  } as VerifyCreatorV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountCreator,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type VerifyCreatorV2Input<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /** Optional creator, defaults to `payer` */
  creator?: TransactionSigner<TAccountCreator>;
  leafOwner: Address<TAccountLeafOwner>;
  /** Defaults to `leaf_owner` */
  leafDelegate?: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: VerifyCreatorV2InstructionDataArgs['root'];
  assetDataHash?: VerifyCreatorV2InstructionDataArgs['assetDataHash'];
  flags?: VerifyCreatorV2InstructionDataArgs['flags'];
  nonce: VerifyCreatorV2InstructionDataArgs['nonce'];
  index: VerifyCreatorV2InstructionDataArgs['index'];
  metadata: VerifyCreatorV2InstructionDataArgs['metadata'];
  proof?: Array<Address>;
};

export function getVerifyCreatorV2Instruction<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: VerifyCreatorV2Input<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountCreator,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): VerifyCreatorV2Instruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountPayer,
  TAccountCreator,
  TAccountLeafOwner,
  TAccountLeafDelegate,
  TAccountMerkleTree,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getVerifyCreatorV2InstructionDataEncoder().encode(
      args as VerifyCreatorV2InstructionDataArgs
    ),
  } as VerifyCreatorV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountCreator,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedVerifyCreatorV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    payer: TAccountMetas[1];
    /** Optional creator, defaults to `payer` */
    creator?: TAccountMetas[2] | undefined;
    leafOwner: TAccountMetas[3];
    /** Defaults to `leaf_owner` */
    leafDelegate?: TAccountMetas[4] | undefined;
    merkleTree: TAccountMetas[5];
    logWrapper: TAccountMetas[6];
    compressionProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: VerifyCreatorV2InstructionData;
};

export function parseVerifyCreatorV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedVerifyCreatorV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_BUBBLEGUM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      payer: getNextAccount(),
      creator: getNextOptionalAccount(),
      leafOwner: getNextAccount(),
      leafDelegate: getNextOptionalAccount(),
      merkleTree: getNextAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getVerifyCreatorV2InstructionDataDecoder().decode(instruction.data),
  };
}
