/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  AccountRole,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  none,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findTreeConfigPda } from '../pdas';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMetadataArgsV2Decoder,
  getMetadataArgsV2Encoder,
  getUpdateArgsDecoder,
  getUpdateArgsEncoder,
  type MetadataArgsV2,
  type MetadataArgsV2Args,
  type UpdateArgs,
  type UpdateArgsArgs,
} from '../types';

export const UPDATE_METADATA_V2_DISCRIMINATOR = new Uint8Array([
  43, 103, 89, 42, 121, 242, 62, 72,
]);

export function getUpdateMetadataV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_METADATA_V2_DISCRIMINATOR
  );
}

export type UpdateMetadataV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountLeafOwner extends string | AccountMeta<string> = string,
  TAccountLeafDelegate extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountCoreCollection extends string | AccountMeta<string> = string,
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3',
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? WritableAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountLeafOwner extends string
        ? ReadonlyAccount<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountLeafDelegate extends string
        ? ReadonlyAccount<TAccountLeafDelegate>
        : TAccountLeafDelegate,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountCoreCollection extends string
        ? ReadonlyAccount<TAccountCoreCollection>
        : TAccountCoreCollection,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateMetadataV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  root: ReadonlyUint8Array;
  assetDataHash: Option<ReadonlyUint8Array>;
  flags: Option<number>;
  nonce: bigint;
  index: number;
  currentMetadata: MetadataArgsV2;
  updateArgs: UpdateArgs;
};

export type UpdateMetadataV2InstructionDataArgs = {
  root: ReadonlyUint8Array;
  assetDataHash?: OptionOrNullable<ReadonlyUint8Array>;
  flags?: OptionOrNullable<number>;
  nonce: number | bigint;
  index: number;
  currentMetadata: MetadataArgsV2Args;
  updateArgs: UpdateArgsArgs;
};

export function getUpdateMetadataV2InstructionDataEncoder(): Encoder<UpdateMetadataV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
      [
        'assetDataHash',
        getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32)),
      ],
      ['flags', getOptionEncoder(getU8Encoder())],
      ['nonce', getU64Encoder()],
      ['index', getU32Encoder()],
      ['currentMetadata', getMetadataArgsV2Encoder()],
      ['updateArgs', getUpdateArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_METADATA_V2_DISCRIMINATOR,
      assetDataHash: value.assetDataHash ?? none(),
      flags: value.flags ?? none(),
    })
  );
}

export function getUpdateMetadataV2InstructionDataDecoder(): Decoder<UpdateMetadataV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
    ['assetDataHash', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['flags', getOptionDecoder(getU8Decoder())],
    ['nonce', getU64Decoder()],
    ['index', getU32Decoder()],
    ['currentMetadata', getMetadataArgsV2Decoder()],
    ['updateArgs', getUpdateArgsDecoder()],
  ]);
}

export function getUpdateMetadataV2InstructionDataCodec(): Codec<
  UpdateMetadataV2InstructionDataArgs,
  UpdateMetadataV2InstructionData
> {
  return combineCodec(
    getUpdateMetadataV2InstructionDataEncoder(),
    getUpdateMetadataV2InstructionDataDecoder()
  );
}

export type UpdateMetadataV2AsyncInput<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountCoreCollection extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig?: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /**
   * Either collection authority or tree owner/delegate, depending
   * on whether the item is in a verified collection.  Defaults to `payer`
   */
  authority?: TransactionSigner<TAccountAuthority>;
  leafOwner: Address<TAccountLeafOwner>;
  /** Defaults to `leaf_owner` */
  leafDelegate?: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  coreCollection?: Address<TAccountCoreCollection>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: UpdateMetadataV2InstructionDataArgs['root'];
  assetDataHash?: UpdateMetadataV2InstructionDataArgs['assetDataHash'];
  flags?: UpdateMetadataV2InstructionDataArgs['flags'];
  nonce: UpdateMetadataV2InstructionDataArgs['nonce'];
  index: UpdateMetadataV2InstructionDataArgs['index'];
  currentMetadata: UpdateMetadataV2InstructionDataArgs['currentMetadata'];
  updateArgs: UpdateMetadataV2InstructionDataArgs['updateArgs'];
  proof?: Array<Address>;
};

export async function getUpdateMetadataV2InstructionAsync<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountCoreCollection extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: UpdateMetadataV2AsyncInput<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateMetadataV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    coreCollection: { value: input.coreCollection ?? null, isWritable: false },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeConfig.value) {
    accounts.treeConfig.value = await findTreeConfigPda({
      merkleTree: expectAddress(accounts.merkleTree.value),
    });
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.coreCollection),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getUpdateMetadataV2InstructionDataEncoder().encode(
      args as UpdateMetadataV2InstructionDataArgs
    ),
  } as UpdateMetadataV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type UpdateMetadataV2Input<
  TAccountTreeConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountCoreCollection extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  payer: TransactionSigner<TAccountPayer>;
  /**
   * Either collection authority or tree owner/delegate, depending
   * on whether the item is in a verified collection.  Defaults to `payer`
   */
  authority?: TransactionSigner<TAccountAuthority>;
  leafOwner: Address<TAccountLeafOwner>;
  /** Defaults to `leaf_owner` */
  leafDelegate?: Address<TAccountLeafDelegate>;
  merkleTree: Address<TAccountMerkleTree>;
  coreCollection?: Address<TAccountCoreCollection>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: UpdateMetadataV2InstructionDataArgs['root'];
  assetDataHash?: UpdateMetadataV2InstructionDataArgs['assetDataHash'];
  flags?: UpdateMetadataV2InstructionDataArgs['flags'];
  nonce: UpdateMetadataV2InstructionDataArgs['nonce'];
  index: UpdateMetadataV2InstructionDataArgs['index'];
  currentMetadata: UpdateMetadataV2InstructionDataArgs['currentMetadata'];
  updateArgs: UpdateMetadataV2InstructionDataArgs['updateArgs'];
  proof?: Array<Address>;
};

export function getUpdateMetadataV2Instruction<
  TAccountTreeConfig extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountMerkleTree extends string,
  TAccountCoreCollection extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: UpdateMetadataV2Input<
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateMetadataV2Instruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountPayer,
  TAccountAuthority,
  TAccountLeafOwner,
  TAccountLeafDelegate,
  TAccountMerkleTree,
  TAccountCoreCollection,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    coreCollection: { value: input.coreCollection ?? null, isWritable: false },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3' as Address<'mnoopTCrg4p8ry25e4bcWA9XZjbNjMTfgYVGGEdRsf3'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW' as Address<'mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.coreCollection),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getUpdateMetadataV2InstructionDataEncoder().encode(
      args as UpdateMetadataV2InstructionDataArgs
    ),
  } as UpdateMetadataV2Instruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountPayer,
    TAccountAuthority,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountMerkleTree,
    TAccountCoreCollection,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedUpdateMetadataV2Instruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    payer: TAccountMetas[1];
    /**
     * Either collection authority or tree owner/delegate, depending
     * on whether the item is in a verified collection.  Defaults to `payer`
     */

    authority?: TAccountMetas[2] | undefined;
    leafOwner: TAccountMetas[3];
    /** Defaults to `leaf_owner` */
    leafDelegate?: TAccountMetas[4] | undefined;
    merkleTree: TAccountMetas[5];
    coreCollection?: TAccountMetas[6] | undefined;
    logWrapper: TAccountMetas[7];
    compressionProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: UpdateMetadataV2InstructionData;
};

export function parseUpdateMetadataV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateMetadataV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_BUBBLEGUM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      payer: getNextAccount(),
      authority: getNextOptionalAccount(),
      leafOwner: getNextAccount(),
      leafDelegate: getNextOptionalAccount(),
      merkleTree: getNextAccount(),
      coreCollection: getNextOptionalAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateMetadataV2InstructionDataDecoder().decode(instruction.data),
  };
}
