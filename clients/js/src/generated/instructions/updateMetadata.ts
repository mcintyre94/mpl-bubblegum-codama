/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  AccountRole,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { findTreeConfigPda } from '../pdas';
import { MPL_BUBBLEGUM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMetadataArgsDecoder,
  getMetadataArgsEncoder,
  getUpdateArgsDecoder,
  getUpdateArgsEncoder,
  type MetadataArgs,
  type MetadataArgsArgs,
  type UpdateArgs,
  type UpdateArgsArgs,
} from '../types';

export const UPDATE_METADATA_DISCRIMINATOR = new Uint8Array([
  170, 182, 43, 239, 97, 78, 225, 186,
]);

export function getUpdateMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_METADATA_DISCRIMINATOR
  );
}

export type UpdateMetadataInstruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountTreeConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountCollectionMint extends string | AccountMeta<string> = string,
  TAccountCollectionMetadata extends string | AccountMeta<string> = string,
  TAccountCollectionAuthorityRecordPda extends
    | string
    | AccountMeta<string> = string,
  TAccountLeafOwner extends string | AccountMeta<string> = string,
  TAccountLeafDelegate extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV',
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK',
  TAccountTokenMetadataProgram extends
    | string
    | AccountMeta<string> = 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeConfig extends string
        ? ReadonlyAccount<TAccountTreeConfig>
        : TAccountTreeConfig,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountCollectionMint extends string
        ? ReadonlyAccount<TAccountCollectionMint>
        : TAccountCollectionMint,
      TAccountCollectionMetadata extends string
        ? ReadonlyAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountCollectionAuthorityRecordPda extends string
        ? ReadonlyAccount<TAccountCollectionAuthorityRecordPda>
        : TAccountCollectionAuthorityRecordPda,
      TAccountLeafOwner extends string
        ? ReadonlyAccount<TAccountLeafOwner>
        : TAccountLeafOwner,
      TAccountLeafDelegate extends string
        ? ReadonlyAccount<TAccountLeafDelegate>
        : TAccountLeafDelegate,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateMetadataInstructionData = {
  discriminator: ReadonlyUint8Array;
  root: ReadonlyUint8Array;
  nonce: bigint;
  index: number;
  currentMetadata: MetadataArgs;
  updateArgs: UpdateArgs;
};

export type UpdateMetadataInstructionDataArgs = {
  root: ReadonlyUint8Array;
  nonce: number | bigint;
  index: number;
  currentMetadata: MetadataArgsArgs;
  updateArgs: UpdateArgsArgs;
};

export function getUpdateMetadataInstructionDataEncoder(): Encoder<UpdateMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
      ['nonce', getU64Encoder()],
      ['index', getU32Encoder()],
      ['currentMetadata', getMetadataArgsEncoder()],
      ['updateArgs', getUpdateArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_METADATA_DISCRIMINATOR })
  );
}

export function getUpdateMetadataInstructionDataDecoder(): Decoder<UpdateMetadataInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
    ['nonce', getU64Decoder()],
    ['index', getU32Decoder()],
    ['currentMetadata', getMetadataArgsDecoder()],
    ['updateArgs', getUpdateArgsDecoder()],
  ]);
}

export function getUpdateMetadataInstructionDataCodec(): Codec<
  UpdateMetadataInstructionDataArgs,
  UpdateMetadataInstructionData
> {
  return combineCodec(
    getUpdateMetadataInstructionDataEncoder(),
    getUpdateMetadataInstructionDataDecoder()
  );
}

export type UpdateMetadataAsyncInput<
  TAccountTreeConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionAuthorityRecordPda extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountPayer extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig?: Address<TAccountTreeConfig>;
  /**
   * Either collection authority or tree owner/delegate, depending
   * on whether the item is in a verified collection
   */
  authority: TransactionSigner<TAccountAuthority>;
  /** Used when item is in a verified collection */
  collectionMint?: Address<TAccountCollectionMint>;
  /** Used when item is in a verified collection */
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  collectionAuthorityRecordPda?: Address<TAccountCollectionAuthorityRecordPda>;
  leafOwner: Address<TAccountLeafOwner>;
  leafDelegate?: Address<TAccountLeafDelegate>;
  payer: TransactionSigner<TAccountPayer>;
  merkleTree: Address<TAccountMerkleTree>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: UpdateMetadataInstructionDataArgs['root'];
  nonce: UpdateMetadataInstructionDataArgs['nonce'];
  index: UpdateMetadataInstructionDataArgs['index'];
  currentMetadata: UpdateMetadataInstructionDataArgs['currentMetadata'];
  updateArgs: UpdateMetadataInstructionDataArgs['updateArgs'];
  proof?: Array<Address>;
};

export async function getUpdateMetadataInstructionAsync<
  TAccountTreeConfig extends string,
  TAccountAuthority extends string,
  TAccountCollectionMint extends string,
  TAccountCollectionMetadata extends string,
  TAccountCollectionAuthorityRecordPda extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountPayer extends string,
  TAccountMerkleTree extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: UpdateMetadataAsyncInput<
    TAccountTreeConfig,
    TAccountAuthority,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionAuthorityRecordPda,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountPayer,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateMetadataInstruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountAuthority,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionAuthorityRecordPda,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountPayer,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    collectionMint: { value: input.collectionMint ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: false,
    },
    collectionAuthorityRecordPda: {
      value: input.collectionAuthorityRecordPda ?? null,
      isWritable: false,
    },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeConfig.value) {
    accounts.treeConfig.value = await findTreeConfigPda({
      merkleTree: expectAddress(accounts.merkleTree.value),
    });
  }
  if (!accounts.leafDelegate.value) {
    accounts.leafDelegate.value = expectSome(accounts.leafOwner.value);
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV' as Address<'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK' as Address<'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY' as Address<'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.collectionAuthorityRecordPda),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getUpdateMetadataInstructionDataEncoder().encode(
      args as UpdateMetadataInstructionDataArgs
    ),
  } as UpdateMetadataInstruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountAuthority,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionAuthorityRecordPda,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountPayer,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type UpdateMetadataInput<
  TAccountTreeConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionAuthorityRecordPda extends string = string,
  TAccountLeafOwner extends string = string,
  TAccountLeafDelegate extends string = string,
  TAccountPayer extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  treeConfig: Address<TAccountTreeConfig>;
  /**
   * Either collection authority or tree owner/delegate, depending
   * on whether the item is in a verified collection
   */
  authority: TransactionSigner<TAccountAuthority>;
  /** Used when item is in a verified collection */
  collectionMint?: Address<TAccountCollectionMint>;
  /** Used when item is in a verified collection */
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  collectionAuthorityRecordPda?: Address<TAccountCollectionAuthorityRecordPda>;
  leafOwner: Address<TAccountLeafOwner>;
  leafDelegate?: Address<TAccountLeafDelegate>;
  payer: TransactionSigner<TAccountPayer>;
  merkleTree: Address<TAccountMerkleTree>;
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProgram?: Address<TAccountCompressionProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  root: UpdateMetadataInstructionDataArgs['root'];
  nonce: UpdateMetadataInstructionDataArgs['nonce'];
  index: UpdateMetadataInstructionDataArgs['index'];
  currentMetadata: UpdateMetadataInstructionDataArgs['currentMetadata'];
  updateArgs: UpdateMetadataInstructionDataArgs['updateArgs'];
  proof?: Array<Address>;
};

export function getUpdateMetadataInstruction<
  TAccountTreeConfig extends string,
  TAccountAuthority extends string,
  TAccountCollectionMint extends string,
  TAccountCollectionMetadata extends string,
  TAccountCollectionAuthorityRecordPda extends string,
  TAccountLeafOwner extends string,
  TAccountLeafDelegate extends string,
  TAccountPayer extends string,
  TAccountMerkleTree extends string,
  TAccountLogWrapper extends string,
  TAccountCompressionProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
>(
  input: UpdateMetadataInput<
    TAccountTreeConfig,
    TAccountAuthority,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionAuthorityRecordPda,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountPayer,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateMetadataInstruction<
  TProgramAddress,
  TAccountTreeConfig,
  TAccountAuthority,
  TAccountCollectionMint,
  TAccountCollectionMetadata,
  TAccountCollectionAuthorityRecordPda,
  TAccountLeafOwner,
  TAccountLeafDelegate,
  TAccountPayer,
  TAccountMerkleTree,
  TAccountLogWrapper,
  TAccountCompressionProgram,
  TAccountTokenMetadataProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MPL_BUBBLEGUM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeConfig: { value: input.treeConfig ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    collectionMint: { value: input.collectionMint ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: false,
    },
    collectionAuthorityRecordPda: {
      value: input.collectionAuthorityRecordPda ?? null,
      isWritable: false,
    },
    leafOwner: { value: input.leafOwner ?? null, isWritable: false },
    leafDelegate: { value: input.leafDelegate ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: false },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.leafDelegate.value) {
    accounts.leafDelegate.value = expectSome(accounts.leafOwner.value);
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV' as Address<'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'>;
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK' as Address<'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY' as Address<'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.proof ?? []).map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.collectionAuthorityRecordPda),
      getAccountMeta(accounts.leafOwner),
      getAccountMeta(accounts.leafDelegate),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getUpdateMetadataInstructionDataEncoder().encode(
      args as UpdateMetadataInstructionDataArgs
    ),
  } as UpdateMetadataInstruction<
    TProgramAddress,
    TAccountTreeConfig,
    TAccountAuthority,
    TAccountCollectionMint,
    TAccountCollectionMetadata,
    TAccountCollectionAuthorityRecordPda,
    TAccountLeafOwner,
    TAccountLeafDelegate,
    TAccountPayer,
    TAccountMerkleTree,
    TAccountLogWrapper,
    TAccountCompressionProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedUpdateMetadataInstruction<
  TProgram extends string = typeof MPL_BUBBLEGUM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    treeConfig: TAccountMetas[0];
    /**
     * Either collection authority or tree owner/delegate, depending
     * on whether the item is in a verified collection
     */

    authority: TAccountMetas[1];
    /** Used when item is in a verified collection */
    collectionMint?: TAccountMetas[2] | undefined;
    /** Used when item is in a verified collection */
    collectionMetadata?: TAccountMetas[3] | undefined;
    collectionAuthorityRecordPda?: TAccountMetas[4] | undefined;
    leafOwner: TAccountMetas[5];
    leafDelegate: TAccountMetas[6];
    payer: TAccountMetas[7];
    merkleTree: TAccountMetas[8];
    logWrapper: TAccountMetas[9];
    compressionProgram: TAccountMetas[10];
    tokenMetadataProgram: TAccountMetas[11];
    systemProgram: TAccountMetas[12];
  };
  data: UpdateMetadataInstructionData;
};

export function parseUpdateMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_BUBBLEGUM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeConfig: getNextAccount(),
      authority: getNextAccount(),
      collectionMint: getNextOptionalAccount(),
      collectionMetadata: getNextOptionalAccount(),
      collectionAuthorityRecordPda: getNextOptionalAccount(),
      leafOwner: getNextAccount(),
      leafDelegate: getNextAccount(),
      payer: getNextAccount(),
      merkleTree: getNextAccount(),
      logWrapper: getNextAccount(),
      compressionProgram: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateMetadataInstructionDataDecoder().decode(instruction.data),
  };
}
