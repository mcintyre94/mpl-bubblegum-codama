/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedBurnInstruction,
  type ParsedBurnV2Instruction,
  type ParsedCancelRedeemInstruction,
  type ParsedCollectV2Instruction,
  type ParsedCreateTreeConfigInstruction,
  type ParsedCreateTreeConfigV2Instruction,
  type ParsedDecompressV1Instruction,
  type ParsedDelegateAndFreezeV2Instruction,
  type ParsedDelegateInstruction,
  type ParsedDelegateV2Instruction,
  type ParsedFreezeV2Instruction,
  type ParsedMintToCollectionV1Instruction,
  type ParsedMintV1Instruction,
  type ParsedMintV2Instruction,
  type ParsedRedeemInstruction,
  type ParsedSetAndVerifyCollectionInstruction,
  type ParsedSetCollectionV2Instruction,
  type ParsedSetDecompressibleStateInstruction,
  type ParsedSetNonTransferableV2Instruction,
  type ParsedSetTreeDelegateInstruction,
  type ParsedThawAndRevokeV2Instruction,
  type ParsedThawV2Instruction,
  type ParsedTransferInstruction,
  type ParsedTransferV2Instruction,
  type ParsedUnverifyCollectionInstruction,
  type ParsedUnverifyCreatorInstruction,
  type ParsedUnverifyCreatorV2Instruction,
  type ParsedUpdateAssetDataV2Instruction,
  type ParsedUpdateMetadataInstruction,
  type ParsedUpdateMetadataV2Instruction,
  type ParsedVerifyCollectionInstruction,
  type ParsedVerifyCreatorInstruction,
  type ParsedVerifyCreatorV2Instruction,
} from '../instructions';

export const MPL_BUBBLEGUM_PROGRAM_ADDRESS =
  'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY' as Address<'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'>;

export enum MplBubblegumAccount {
  TreeConfig,
  Voucher,
}

export function identifyMplBubblegumAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MplBubblegumAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([122, 245, 175, 248, 171, 34, 0, 207])
      ),
      0
    )
  ) {
    return MplBubblegumAccount.TreeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([191, 204, 149, 234, 213, 165, 13, 65])
      ),
      0
    )
  ) {
    return MplBubblegumAccount.Voucher;
  }
  throw new Error(
    'The provided account could not be identified as a mplBubblegum account.'
  );
}

export enum MplBubblegumInstruction {
  Burn,
  BurnV2,
  CancelRedeem,
  CollectV2,
  CreateTreeConfig,
  CreateTreeConfigV2,
  DecompressV1,
  Delegate,
  DelegateAndFreezeV2,
  DelegateV2,
  FreezeV2,
  MintToCollectionV1,
  MintV1,
  MintV2,
  Redeem,
  SetAndVerifyCollection,
  SetCollectionV2,
  SetDecompressibleState,
  SetNonTransferableV2,
  SetTreeDelegate,
  ThawAndRevokeV2,
  ThawV2,
  Transfer,
  TransferV2,
  UnverifyCollection,
  UnverifyCreator,
  UnverifyCreatorV2,
  UpdateAssetDataV2,
  UpdateMetadata,
  UpdateMetadataV2,
  VerifyCollection,
  VerifyCreator,
  VerifyCreatorV2,
}

export function identifyMplBubblegumInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MplBubblegumInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([116, 110, 29, 56, 107, 219, 42, 93])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.Burn;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([115, 210, 34, 240, 232, 143, 183, 16])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.BurnV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([111, 76, 232, 50, 39, 175, 48, 242])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.CancelRedeem;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([21, 11, 159, 47, 4, 195, 106, 56])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.CollectV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([165, 83, 136, 142, 89, 202, 47, 220])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.CreateTreeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 99, 95, 215, 142, 203, 227, 205])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.CreateTreeConfigV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 85, 76, 70, 228, 250, 164, 81])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.DecompressV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([90, 147, 75, 178, 85, 88, 4, 137])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.Delegate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([17, 229, 35, 218, 190, 241, 250, 123])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.DelegateAndFreezeV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 87, 125, 140, 181, 131, 128, 227])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.DelegateV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([200, 151, 244, 102, 16, 195, 255, 3])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.FreezeV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([153, 18, 178, 47, 197, 158, 86, 15])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.MintToCollectionV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 98, 192, 118, 184, 147, 118, 104])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.MintV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([120, 121, 23, 146, 173, 110, 199, 205])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.MintV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([184, 12, 86, 149, 70, 196, 97, 225])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.Redeem;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([235, 242, 121, 216, 158, 234, 180, 234])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.SetAndVerifyCollection;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([229, 35, 61, 91, 15, 14, 99, 160])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.SetCollectionV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([82, 104, 152, 6, 149, 111, 100, 13])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.SetDecompressibleState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 141, 206, 58, 242, 199, 152, 168])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.SetNonTransferableV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([253, 118, 66, 37, 190, 49, 154, 102])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.SetTreeDelegate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([86, 214, 190, 37, 167, 4, 28, 116])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.ThawAndRevokeV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([96, 133, 101, 93, 82, 220, 146, 191])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.ThawV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([163, 52, 200, 231, 140, 3, 69, 186])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.Transfer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([119, 40, 6, 235, 234, 221, 248, 49])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.TransferV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([250, 251, 42, 106, 41, 137, 186, 168])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.UnverifyCollection;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([107, 178, 57, 39, 105, 115, 112, 152])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.UnverifyCreator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([174, 112, 29, 142, 230, 100, 239, 7])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.UnverifyCreatorV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 56, 111, 43, 95, 14, 11, 61])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.UpdateAssetDataV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 182, 43, 239, 97, 78, 225, 186])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.UpdateMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([43, 103, 89, 42, 121, 242, 62, 72])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.UpdateMetadataV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 113, 101, 253, 79, 55, 122, 169])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.VerifyCollection;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([52, 17, 96, 132, 71, 4, 85, 194])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.VerifyCreator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([85, 138, 140, 42, 22, 241, 118, 102])
      ),
      0
    )
  ) {
    return MplBubblegumInstruction.VerifyCreatorV2;
  }
  throw new Error(
    'The provided instruction could not be identified as a mplBubblegum instruction.'
  );
}

export type ParsedMplBubblegumInstruction<
  TProgram extends string = 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY',
> =
  | ({
      instructionType: MplBubblegumInstruction.Burn;
    } & ParsedBurnInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.BurnV2;
    } & ParsedBurnV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.CancelRedeem;
    } & ParsedCancelRedeemInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.CollectV2;
    } & ParsedCollectV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.CreateTreeConfig;
    } & ParsedCreateTreeConfigInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.CreateTreeConfigV2;
    } & ParsedCreateTreeConfigV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.DecompressV1;
    } & ParsedDecompressV1Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.Delegate;
    } & ParsedDelegateInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.DelegateAndFreezeV2;
    } & ParsedDelegateAndFreezeV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.DelegateV2;
    } & ParsedDelegateV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.FreezeV2;
    } & ParsedFreezeV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.MintToCollectionV1;
    } & ParsedMintToCollectionV1Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.MintV1;
    } & ParsedMintV1Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.MintV2;
    } & ParsedMintV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.Redeem;
    } & ParsedRedeemInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.SetAndVerifyCollection;
    } & ParsedSetAndVerifyCollectionInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.SetCollectionV2;
    } & ParsedSetCollectionV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.SetDecompressibleState;
    } & ParsedSetDecompressibleStateInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.SetNonTransferableV2;
    } & ParsedSetNonTransferableV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.SetTreeDelegate;
    } & ParsedSetTreeDelegateInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.ThawAndRevokeV2;
    } & ParsedThawAndRevokeV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.ThawV2;
    } & ParsedThawV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.Transfer;
    } & ParsedTransferInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.TransferV2;
    } & ParsedTransferV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.UnverifyCollection;
    } & ParsedUnverifyCollectionInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.UnverifyCreator;
    } & ParsedUnverifyCreatorInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.UnverifyCreatorV2;
    } & ParsedUnverifyCreatorV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.UpdateAssetDataV2;
    } & ParsedUpdateAssetDataV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.UpdateMetadata;
    } & ParsedUpdateMetadataInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.UpdateMetadataV2;
    } & ParsedUpdateMetadataV2Instruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.VerifyCollection;
    } & ParsedVerifyCollectionInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.VerifyCreator;
    } & ParsedVerifyCreatorInstruction<TProgram>)
  | ({
      instructionType: MplBubblegumInstruction.VerifyCreatorV2;
    } & ParsedVerifyCreatorV2Instruction<TProgram>);
